{"version":3,"sources":["components/Display/Display.js","components/Tile/Tile.js","components/Board/Board.js","components/Game/Game.js","App.js","index.js"],"names":["Display","props","react_default","a","createElement","id","mines","flagsPlaced","timeElapsed","Tile","content","revealed","contents","class","className","coords","style","fontSize","backgroundColor","color","borderRadius","textAlign","onClick","handleClick","onContextMenu","handleRightClick","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","target","getAttribute","split","clickedCoords","y","parseInt","x","gameStarted","state","boardRevealedState","copyOfBoardState","copyBoardState","rows","columns","copyOfRevealedState","copyRevealedState","revealTile","setState","startGame","setBoard","console","log","alert","i","j","preventDefault","setFlag","decrementFlagsPlaced","incrementFlagsPlaced","out","newRow","push","boardState","boardInit","minesToPlace","boardStateCopy","setFreeSpace","placeMines","countNeighboringMines","oddsOfMinePerTile","Math","random","coordObj","countTileNeighbors","_this2","boardStyle","display","gridTemplateRows","gridTemplateColumns","gridGap","tiles","map","row","tile","components_Tile_Tile","key","React","Component","Game","started","intervalId","setInterval","incrementTimeElapsed","components_Display_Display","components_Board_Board","App","components_Game_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"uKAWeA,EATC,SAACC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,qBACNH,EAAAC,EAAAC,cAAA,8BAAsBH,EAAMK,MAAQL,EAAMM,aAC1CL,EAAAC,EAAAC,cAAA,2BAAmBH,EAAMO,eCsChBC,EA1CF,SAACR,GACZ,IAgBIS,EAeJ,OAZIA,EAFmB,IAAnBT,EAAMU,SACe,KAAnBV,EAAMW,SACEV,EAAAC,EAAAC,cAAA,KAAGS,MAAM,gBACVZ,EAAMW,SACLX,EAAMW,SAEN,IAEiB,IAApBX,EAAMU,SACLT,EAAAC,EAAAC,cAAA,KAAGU,UAAU,cAAcC,OAAQd,EAAMc,SAEzC,GAIVb,EAAAC,EAAAC,cAAA,OACEY,MAAOf,EAAMU,SAjCS,CACxBM,SAAU,OACVC,gBAAiB,iBACjBC,MAAO,qBACPC,aAAc,MACdC,UAAW,UAGe,CAC1BJ,SAAU,OACVC,gBAAiB,qBACjBC,MAAO,qBACPC,aAAc,MACdC,UAAW,UAqBTC,QAASrB,EAAMsB,YACfR,OAAQd,EAAMc,OACdS,cAAevB,EAAMwB,kBACrBf,ICyMSgB,cAzOb,SAAAA,EAAYzB,GAAO,IAAA0B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM7B,KAORsB,YAAc,SAACW,GACb,GAAKA,EAAEC,OAAOC,aAAa,UAA3B,CACA,IAAIrB,EAASmB,EAAEC,OAAOC,aAAa,UAAUC,MAAM,KAC7CC,EAAgB,CACpBC,EAAGC,SAASzB,EAAO,IACnB0B,EAAGD,SAASzB,EAAO,KAGrB,GAAKY,EAAK1B,MAAMyC,aAId,IAAKf,EAAKgB,MAAMC,mBAAmBN,EAAcC,GAAGD,EAAcG,GAAI,CACpE,IAAMI,EAAmBlB,EAAKmB,eAAenB,EAAK1B,MAAM8C,KAAMpB,EAAK1B,MAAM+C,SACnEC,EAAsBtB,EAAKuB,kBAAkBvB,EAAK1B,MAAM8C,KAAMpB,EAAK1B,MAAM+C,SAC/ErB,EAAKwB,WAAWb,EAAeW,EAAqBJ,EAAkBlB,EAAK1B,MAAM8C,KAAMpB,EAAK1B,MAAM+C,SAClGrB,EAAKyB,SAAS,CACZR,mBAAoBK,UARxBtB,EAAK1B,MAAMoD,YACX1B,EAAK2B,SAAS3B,EAAK1B,MAAM8C,KAAMpB,EAAK1B,MAAM+C,QAASrB,EAAK1B,MAAMK,MAAOgC,KAlBtDX,EA+BnBwB,WAAa,SAACpC,EAAQkC,EAAqBJ,EAAkBE,EAAMC,GACjEO,QAAQC,IAAI,qBADiE,IAG3EjB,EAEExB,EAFFwB,EACAE,EACE1B,EADF0B,EAEF,GAA+B,KAA3BI,EAAiBN,GAAGE,GAEtB,OADAgB,MAAM,cACCF,QAAQC,IAAI,4CAKrB,GAHkC,IAA9BP,EAAoBV,GAAGE,KACzBQ,EAAoBV,GAAGE,GAAK,GAEC,IAA3BI,EAAiBN,GAAGE,GAEtB,IAAK,IAAIiB,GAAK,EAAGA,EAAI,EAAGA,IACtB,KAAInB,EAAImB,GAAKX,GAAQR,EAAImB,EAAI,GAC7B,IAAK,IAAIC,GAAK,EAAGA,EAAI,EAAGA,IAClBlB,EAAIkB,GAAKX,GAAWP,EAAIkB,EAAI,GACU,IAAtCV,EAAoBV,EAAImB,GAAGjB,EAAIkB,IACjChC,EAAKwB,WAAW,CACdZ,EAAGA,EAAImB,EACPjB,EAAGA,EAAIkB,GACNV,EAAqBJ,EAAkBE,EAAMC,IAtDvCrB,EA8DnBF,iBAAmB,SAACS,GAClBA,EAAE0B,iBACF,IAAI7C,EAASmB,EAAEC,OAAOC,aAAa,UAAUC,MAAM,KAC7CC,EAAgB,CACpBC,EAAGC,SAASzB,EAAO,IACnB0B,EAAGD,SAASzB,EAAO,KAEmD,IAApEY,EAAKgB,MAAMC,mBAAmBN,EAAcC,GAAGD,EAAcG,IACjEd,EAAKkC,QAAQvB,IAtEIX,EAyEnBkC,QAAU,SAAC9C,GACT,IAAMkC,EAAsBtB,EAAKuB,kBAAkBvB,EAAK1B,MAAM8C,KAAMpB,EAAK1B,MAAM+C,SAC1EC,EAAoBlC,EAAOwB,GAAGxB,EAAO0B,IAIxCQ,EAAoBlC,EAAOwB,GAAGxB,EAAO0B,GAAK,EAC1Cd,EAAK1B,MAAM6D,yBAJXb,EAAoBlC,EAAOwB,GAAGxB,EAAO0B,IAAM,EAC3Cd,EAAK1B,MAAM8D,wBAKbpC,EAAKyB,SAAS,CACZR,mBAAoBK,KAnFLtB,EAuFnBmB,eAAiB,SAACC,EAAMC,GAEtB,IADA,IAAMgB,EAAM,GACHzB,EAAI,EAAGA,EAAIQ,EAAMR,IAAK,CAE7B,IADA,IAAI0B,EAAS,GACJxB,EAAI,EAAGA,EAAIO,EAASP,IAC3BwB,EAAOC,KAAKvC,EAAKgB,MAAMwB,WAAW5B,GAAGE,IAEvCuB,EAAIE,KAAKD,GAEX,OAAOD,GAhGUrC,EAmGnBuB,kBAAoB,SAACH,EAAMC,GAEzB,IADA,IAAMgB,EAAM,GACHzB,EAAI,EAAGA,EAAIQ,EAAMR,IAAK,CAE7B,IADA,IAAI0B,EAAS,GACJxB,EAAI,EAAGA,EAAIO,EAASP,IAC3BwB,EAAOC,KAAKvC,EAAKgB,MAAMC,mBAAmBL,GAAGE,IAE/CuB,EAAIE,KAAKD,GAEX,OAAOD,GA5GUrC,EA+GnByC,UAAY,SAACrB,EAAMC,GAEjB,IADA,IAAMgB,EAAM,GACHzB,EAAI,EAAGA,EAAIQ,EAAMR,IAAK,CAE7B,IADA,IAAI0B,EAAS,GACJxB,EAAI,EAAGA,EAAIO,EAASP,IAC3BwB,EAAOC,KAAK,GAEdF,EAAIE,KAAKD,GAEX,OAAOD,GAxHUrC,EA4HnB2B,SAAW,SAACP,EAAMC,EAASqB,EAAc/B,GACvC,IAAMgC,EAAiB3C,EAAKmB,eAAeC,EAAMC,GAC3CC,EAAsBtB,EAAKuB,kBAAkBH,EAAMC,GACzDrB,EAAK4C,aAAaxB,EAAMC,EAASV,EAAegC,GAChD3C,EAAK6C,WAAWzB,EAAMC,EAASqB,EAAcC,GAC7C3C,EAAK8C,sBAAsB1B,EAAMC,EAASsB,GAC1C3C,EAAKwB,WAAWb,EAAeW,EAAqBqB,EAAgBvB,EAAMC,GAC1ErB,EAAKyB,SAAS,CACZe,WAAYG,EACZ1B,mBAAoBK,KArILtB,EA0InB4C,aAAe,SAACxB,EAAMC,EAASV,EAAegC,GAC5C,IAAK,IAAIZ,GAAK,EAAGA,EAAI,EAAGA,IACtB,GAAIpB,EAAcC,EAAImB,GAAK,GAAKpB,EAAcC,EAAImB,EAAIX,EACpD,IAAK,IAAIY,GAAK,EAAGA,EAAI,EAAGA,IAClBrB,EAAcG,EAAIkB,GAAK,GAAKrB,EAAcG,EAAIkB,EAAIX,IACpDsB,EAAehC,EAAcC,EAAImB,GAAGpB,EAAcG,EAAIkB,IAAM,IA/InDhC,EAsJnB6C,WAAa,SAACzB,EAAMC,EAASqB,EAAcC,GAEzC,IADA,IAAMI,EAAoBL,GAAgBtB,EAAOC,KAE/C,IAAK,IAAIT,EAAI,EAAGA,EAAIQ,EAAMR,IACxB,IAAK,IAAIE,EAAI,EAAGA,EAAIO,EAASP,IAC3B,GAA6B,IAAzB6B,EAAe/B,GAAGE,IAChBkC,KAAKC,UAAYF,IACnBJ,EAAe/B,GAAGE,GAAK,MACvB4B,GAEE,OAAOd,QAAQC,IAAI,6BAhKd7B,EAyKnB8C,sBAAwB,SAAC1B,EAAMC,EAASsB,GACtC,IAAK,IAAI/B,EAAI,EAAGA,EAAIQ,EAAMR,IACxB,IAAK,IAAIE,EAAI,EAAGA,EAAIO,EAASP,IAC3B,GAAI6B,EAAe/B,GAAGE,GAAK,EAAG,CAC5B,IAAIoC,EAAW,CACbtC,EAAGA,EACHE,EAAGA,GAELd,EAAKmD,mBAAmB/B,EAAMC,EAAS6B,EAAUP,KAjLtC3C,EAsLnBmD,mBAAqB,SAAC/B,EAAMC,EAASjC,EAAQuD,IACC,IAAxCA,EAAevD,EAAOwB,GAAGxB,EAAO0B,KAClC6B,EAAevD,EAAOwB,GAAGxB,EAAO0B,GAAK,GAEvC,IAAK,IAAIiB,GAAK,EAAGA,EAAI,EAAGA,IACtB,GAAI3C,EAAOwB,EAAImB,GAAK,GAAK3C,EAAOwB,EAAImB,EAAIX,EACtC,IAAK,IAAIY,GAAK,EAAGA,EAAI,EAAGA,IAClB5C,EAAO0B,EAAIkB,GAAK,GAAK5C,EAAO0B,EAAIkB,EAAIX,GAEa,KAA/CsB,EAAevD,EAAOwB,EAAImB,GAAG3C,EAAO0B,EAAIkB,IAC1CW,EAAevD,EAAOwB,GAAGxB,EAAO0B,MA9L1Cd,EAAKgB,MAAQ,CACXwB,WAAYxC,EAAKyC,UAAUzC,EAAK1B,MAAM8C,KAAMpB,EAAK1B,MAAM+C,SACvDJ,mBAAoBjB,EAAKyC,UAAUzC,EAAK1B,MAAM8C,KAAMpB,EAAK1B,MAAM+C,UAJhDrB,oFAyMjB4B,QAAQC,IAAI1B,KAAKa,wCAGV,IAAAoC,EAAAjD,KAEDkD,EAAa,CACjB9D,gBAAiB,qBACjB+D,QAAS,OACTC,iBAAkB,UAAYpD,KAAK7B,MAAM8C,KAAO,UAChDoC,oBAAqB,UAAYrD,KAAK7B,MAAM+C,QAAU,UACtDoC,QAAS,OAGLC,EAAQvD,KAAKa,MAAMwB,WAAWmB,IAAI,SAACC,EAAKhD,GAC5C,OAAOgD,EAAID,IAAI,SAACE,EAAM/C,GACpB,OACAvC,EAAAC,EAAAC,cAACqF,EAAD,CACEC,IAAKnD,EAAI,IAAME,EACf7B,SAAUmE,EAAKpC,MAAMwB,WAAW5B,GAAGE,GACnC9B,SAAUoE,EAAKpC,MAAMC,mBAAmBL,GAAGE,GAC3ClB,YAAawD,EAAKxD,YAClBR,OAAQwB,EAAI,IAAME,EAClBhB,iBAAkBsD,EAAKtD,uBAK7B,OACAvB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAOW,MAAOgE,GAAtB,IAAoCK,EAApC,YAtOgBM,IAAMC,WC4DXC,cArDb,SAAAA,EAAY5F,GAAO,IAAA0B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+D,IACjBlE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiE,GAAA5D,KAAAH,KAAM7B,KAWRoD,UAAY,WACV1B,EAAKyB,SAAS,CACZ0C,SAAS,EACTC,WAAYC,YAAYrE,EAAKsE,qBAAsB,QAfpCtE,EAmBnBsE,qBAAuB,WACrBtE,EAAKyB,SAAS,CAAC5C,YAAamB,EAAKgB,MAAMnC,YAAc,KApBpCmB,EAuBnBoC,qBAAuB,WACrBpC,EAAKyB,SAAS,CAAC7C,YAAaoB,EAAKgB,MAAMpC,YAAc,KAxBpCoB,EA2BnBmC,qBAAuB,WACrBnC,EAAKyB,SAAS,CAAC7C,YAAaoB,EAAKgB,MAAMpC,YAAc,KA1BrDoB,EAAKgB,MAAQ,CACXnC,YAAa,EACbuC,KAAM,GACNC,QAAS,GACT1C,MAAO,GACPwF,SAAS,EACTvF,YAAa,EACbwF,WAAY,MATGpE,wEAgCjB,OACEzB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,aACbZ,EAAAC,EAAAC,cAAC8F,EAAD,CACE3F,YAAauB,KAAKa,MAAMpC,YACxBD,MAAOwB,KAAKa,MAAMrC,MAClBE,YAAasB,KAAKa,MAAMnC,cAE1BN,EAAAC,EAAAC,cAAC+F,EAAD,CACEpD,KAAMjB,KAAKa,MAAMI,KACjBC,QAASlB,KAAKa,MAAMK,QACpB1C,MAAOwB,KAAKa,MAAMrC,MAClBoC,YAAaZ,KAAKa,MAAMmD,QACxBzC,UAAWvB,KAAKuB,UAChBU,qBAAsBjC,KAAKiC,qBAC3BD,qBAAsBhC,KAAKgC,+BA/ClB6B,IAAMC,WCCVQ,mLARX,OACElG,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACdZ,EAAAC,EAAAC,cAACiG,EAAD,cAJWT,aCAlBU,IAASC,OAAOrG,EAAAC,EAAAC,cAACoG,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.7bb00f8e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Display = (props) => {\n  return (\n    <div id=\"display-container\">\n      <h3>Bombs remaining: {props.mines - props.flagsPlaced}</h3>\n      <h3>Time Elapsed: {props.timeElapsed}</h3>\n    </div>\n  )\n}\n\nexport default Display;","import React from \"react\";\n\nconst Tile = (props) => {\n  const tileStyleRevealed = {\n    fontSize: \"14px\",\n    backgroundColor: \"rgb(53,91,123)\",\n    color: \"rgb(248, 177, 149)\",\n    borderRadius: \"1px\",\n    textAlign: \"center\"\n  }\n\n  const tileStyleUnrevealed = {\n    fontSize: \"14px\",\n    backgroundColor: \"rgb(248, 177, 149)\",\n    color: \"rgb(248, 177, 149)\",\n    borderRadius: \"1px\",\n    textAlign: \"center\"\n  }\n\n  let content;\n  if (props.revealed === 1) {\n    if (props.contents === 99) {\n      content = <i class=\"fas fa-fire\"></i>\n    } else if (props.contents) {\n      content = props.contents\n    } else {\n      content = \"\"\n    }\n  } else if (props.revealed === -1) {\n    content = <i className=\"fas fa-flag\" coords={props.coords}></i>\n  } else {\n    content = \"\";\n  }\n  \n  return (\n    <div \n      style={props.revealed ? tileStyleRevealed : tileStyleUnrevealed}\n      onClick={props.handleClick}\n      coords={props.coords}\n      onContextMenu={props.handleRightClick}\n    >{content}</div>\n  )\n}\n\nexport default Tile;","import React from \"react\";\nimport Tile from \"../Tile\";\n\n//colors : https://color.adobe.com/Copie-de-Copy-of-Pastels-color-theme-11556921/edit/?copy=true\n// nice but not super necessary features:\n// clicking on a revealed tile which has a number that matched number of adjacent flags reveals neighboring tiles\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boardState: this.boardInit(this.props.rows, this.props.columns),\n      boardRevealedState: this.boardInit(this.props.rows, this.props.columns)\n    }\n  }\n\n  handleClick = (e) => {\n    if (!e.target.getAttribute(\"coords\")) return;\n    let coords = e.target.getAttribute(\"coords\").split(\".\");\n    const clickedCoords = {\n      y: parseInt(coords[0]),\n      x: parseInt(coords[1])\n    }\n\n    if (!this.props.gameStarted) {\n      this.props.startGame();\n      this.setBoard(this.props.rows, this.props.columns, this.props.mines, clickedCoords);\n    } else {\n      if (!this.state.boardRevealedState[clickedCoords.y][clickedCoords.x]) {\n        const copyOfBoardState = this.copyBoardState(this.props.rows, this.props.columns);\n        const copyOfRevealedState = this.copyRevealedState(this.props.rows, this.props.columns);\n        this.revealTile(clickedCoords, copyOfRevealedState, copyOfBoardState, this.props.rows, this.props.columns);\n        this.setState({\n          boardRevealedState: copyOfRevealedState\n        });\n      }\n    }\n  }\n\n  revealTile = (coords, copyOfRevealedState, copyOfBoardState, rows, columns) => {\n    console.log(\"revealTile called\");\n    let {\n      y,\n      x\n    } = coords;\n    if (copyOfBoardState[y][x] === 99) {\n      alert(\"GAME OVER!\")\n      return console.log(\"Game over function should be called here\");\n    }\n    if (copyOfRevealedState[y][x] === 0) {\n      copyOfRevealedState[y][x] = 1;\n    }\n    if (copyOfBoardState[y][x] === 0) {\n\n      for (let i = -1; i < 2; i++) {\n        if (y + i >= rows || y + i < 0) continue;\n        for (let j = -1; j < 2; j++) {\n          if (x + j >= columns || x + j < 0) continue;\n          if (copyOfRevealedState[y + i][x + j] === 0) {\n            this.revealTile({\n              y: y + i,\n              x: x + j\n            }, copyOfRevealedState, copyOfBoardState, rows, columns)\n          }\n        }\n      }\n    }\n\n  }\n\n  handleRightClick = (e) => {\n    e.preventDefault();\n    let coords = e.target.getAttribute(\"coords\").split(\".\");\n    const clickedCoords = {\n      y: parseInt(coords[0]),\n      x: parseInt(coords[1])\n    }\n    if (this.state.boardRevealedState[clickedCoords.y][clickedCoords.x] === 1) return;\n    this.setFlag(clickedCoords);\n  }\n\n  setFlag = (coords) => {\n    const copyOfRevealedState = this.copyRevealedState(this.props.rows, this.props.columns);\n    if (!copyOfRevealedState[coords.y][coords.x]) {\n      copyOfRevealedState[coords.y][coords.x] = -1;\n      this.props.incrementFlagsPlaced();\n    } else {\n      copyOfRevealedState[coords.y][coords.x] = 0;\n      this.props.decrementFlagsPlaced();\n    }\n    this.setState({\n      boardRevealedState: copyOfRevealedState\n    });\n  }\n\n  copyBoardState = (rows, columns) => {\n    const out = [];\n    for (let y = 0; y < rows; y++) {\n      let newRow = [];\n      for (let x = 0; x < columns; x++) {\n        newRow.push(this.state.boardState[y][x]);\n      }\n      out.push(newRow);\n    }\n    return out;\n  }\n\n  copyRevealedState = (rows, columns) => {\n    const out = [];\n    for (let y = 0; y < rows; y++) {\n      let newRow = [];\n      for (let x = 0; x < columns; x++) {\n        newRow.push(this.state.boardRevealedState[y][x]);\n      }\n      out.push(newRow);\n    }\n    return out;\n  }\n\n  boardInit = (rows, columns) => {\n    const out = [];\n    for (let y = 0; y < rows; y++) {\n      let newRow = [];\n      for (let x = 0; x < columns; x++) {\n        newRow.push(0);\n      }\n      out.push(newRow);\n    }\n    return out;\n\n  }\n\n  setBoard = (rows, columns, minesToPlace, clickedCoords) => {\n    const boardStateCopy = this.copyBoardState(rows, columns);\n    const copyOfRevealedState = this.copyRevealedState(rows, columns);\n    this.setFreeSpace(rows, columns, clickedCoords, boardStateCopy);\n    this.placeMines(rows, columns, minesToPlace, boardStateCopy);\n    this.countNeighboringMines(rows, columns, boardStateCopy);\n    this.revealTile(clickedCoords, copyOfRevealedState, boardStateCopy, rows, columns);\n    this.setState({\n      boardState: boardStateCopy,\n      boardRevealedState: copyOfRevealedState\n    })\n    // reveal clicked area\n  }\n\n  setFreeSpace = (rows, columns, clickedCoords, boardStateCopy) => {\n    for (let i = -1; i < 2; i++) {\n      if (clickedCoords.y + i >= 0 && clickedCoords.y + i < rows) {\n        for (let j = -1; j < 2; j++) {\n          if (clickedCoords.x + j >= 0 && clickedCoords.x + j < columns) {\n            boardStateCopy[clickedCoords.y + i][clickedCoords.x + j] = -1;\n          }\n        }\n      }\n    }\n  }\n\n  placeMines = (rows, columns, minesToPlace, boardStateCopy) => {\n    const oddsOfMinePerTile = minesToPlace / (rows * columns);\n    while (true) {\n      for (let y = 0; y < rows; y++) {\n        for (let x = 0; x < columns; x++) {\n          if (boardStateCopy[y][x] === 0) {\n            if (Math.random() <= oddsOfMinePerTile) {\n              boardStateCopy[y][x] = 99;\n              minesToPlace--;\n              if (!minesToPlace) {\n                return console.log(\"completed mine placement\")\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  countNeighboringMines = (rows, columns, boardStateCopy) => {\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < columns; x++) {\n        if (boardStateCopy[y][x] < 1) {\n          let coordObj = {\n            y: y,\n            x: x\n          };\n          this.countTileNeighbors(rows, columns, coordObj, boardStateCopy)\n        }\n      }\n    }\n  }\n  countTileNeighbors = (rows, columns, coords, boardStateCopy) => {\n    if (boardStateCopy[coords.y][coords.x] === -1) {\n      boardStateCopy[coords.y][coords.x] = 0;\n    }\n    for (let i = -1; i < 2; i++) {\n      if (coords.y + i >= 0 && coords.y + i < rows) {\n        for (let j = -1; j < 2; j++) {\n          if (coords.x + j >= 0 && coords.x + j < columns) {\n            // if(i === 0 && j === 0) continue;\n            if (boardStateCopy[coords.y + i][coords.x + j] === 99) {\n              boardStateCopy[coords.y][coords.x]++;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n\n  render() {\n\n    const boardStyle = {\n      backgroundColor: \"rgb(246, 114, 128)\",\n      display: \"grid\",\n      gridTemplateRows: \"repeat(\" + this.props.rows + \", 30px)\",\n      gridTemplateColumns: \"repeat(\" + this.props.columns + \", 30px)\",\n      gridGap: \"2px\"\n    };\n\n    const tiles = this.state.boardState.map((row, y) => {\n      return row.map((tile, x) => {\n        return ( \n        <Tile \n          key={y + \".\" + x} \n          contents={this.state.boardState[y][x]}\n          revealed={this.state.boardRevealedState[y][x]}\n          handleClick={this.handleClick}\n          coords={y + \".\" + x}\n          handleRightClick={this.handleRightClick}/>\n        );\n      })\n    });\n\n    return ( \n    <div id=\"board\"style={boardStyle}> {tiles} </div>\n    );\n  }\n}\nexport default Board;","// TO DO: \n// CHANGE FOLDER STRUCTURE WHY THE HELL DO I HAVE COMPONENT FOLDERS WITH INDICES FOR THIS?????\n// finish board logic\n// display logic\n// implement timer\n// implement gameover\n// implement userWins\n\n\nimport React from \"react\";\nimport Display from \"../Display\";\nimport Board from \"../Board\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeElapsed: 0,\n      rows: 16,\n      columns: 16,\n      mines: 40,\n      started: false,\n      flagsPlaced: 0,\n      intervalId: null\n    };\n  }\n  startGame = () => {\n    this.setState({\n      started: true,\n      intervalId: setInterval(this.incrementTimeElapsed, 1000)\n    })\n  }\n\n  incrementTimeElapsed = () => {\n    this.setState({timeElapsed: this.state.timeElapsed + 1});\n  }\n\n  incrementFlagsPlaced = () => {\n    this.setState({flagsPlaced: this.state.flagsPlaced + 1});\n  }\n\n  decrementFlagsPlaced = () => {\n    this.setState({flagsPlaced: this.state.flagsPlaced - 1});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Display\n          flagsPlaced={this.state.flagsPlaced}\n          mines={this.state.mines}\n          timeElapsed={this.state.timeElapsed}\n        />\n        <Board \n          rows={this.state.rows}\n          columns={this.state.columns}\n          mines={this.state.mines}\n          gameStarted={this.state.started}\n          startGame={this.startGame}\n          incrementFlagsPlaced={this.incrementFlagsPlaced}\n          decrementFlagsPlaced={this.decrementFlagsPlaced}\n        />\n\n      </div>\n    );\n  }\n}\nexport default Game;","import React, { Component } from 'react';\nimport Game from \"./components/Game\"\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"],"sourceRoot":""}